%\VignetteIndexEntry{PKgraph Overview}
%\VignetteDepends{PKgraph}
%\VignetteKeywords{PKgraph}
%\VignetteKeywords{PKgraph}
%\VignetteKeywords{PKgraph}
%\VignettePackage{PKgraph}
\documentclass[a4paper]{article}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}

\author{Xiaoyong Sun$^\dagger$$^\ddagger$\footnote{sunx1@iastate.edu}}

\begin{document}

\setkeys{Gin}{width=1\textwidth}

\title{Quick Guide for PKgraph Package}
\maketitle
\begin{center}$^\dagger$Binformatics and Computational Biology Program, $^\ddagger$Department of Statistics \\ Iowa State University, Ames, Iowa 50010, USA
\end{center}

\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Introduction}
Population pharmacokinetic (PopPK) modeling has become increasing important in
drug development because it allows unbalanced design, sparse data and the study
of individual variation. However, this complexity of the model makes it a challenge
to diagnose the fit.  Graphics can play an important and unique role in PopPK model diagnostics.
The software described in this paper, PKgraph, provides a graphical user interface for
PopPK model diagnosis with interactive graphics. It also provides an integrated and comprehensive platform for analysis
of pharmacokinetic data including exploratory data analysis, goodness of model fit,
model validation and model comparison. It can be used with a variety of modeling fitting software,
including NONMEM, Monolix, SAS and R. PKGraph is programmed in R, and uses the R packages
lattice, ggplot2 for static graphics, and rggobi for interactive graphics. This R package is
supported with a user-friendly graphical user interface so that users can easily control diagnosing
with simple clicks. The PKGraph software serves as a supplement to the existing packages:
NONMEM, Xpose and PsN for diagnosing models.
\newline
\newline
PKgraph is a R packaged built on the following R packages: RGtk2, gWidgets, gWidgetsRGtk2,
lattice, and ggplot2. It requires R ($>$ 2.0) and  GTK+, and runs under Windows, Linux and Mac.
\section{Installation}
PKgraph needs to install the following programs and R packages:
\newline \newline
1. install GTK \newline
For Windows, you can download the GTK Developer's Pack from
\newline
   http://gladewin32.sourceforge.net/
\newline
\newline
For Unix, you can fetch the source files for the different
libraries from
\newline
   ftp://ftp.gtk.org/pub/gtk/v2.8/
\newline
\newline
2. Install RGtk2 (Please see RGtk2 Installation notes if you have problems) \newline
a. Install R package, RGtk2: \textit{install.packages(``RGtk2'')} \newline \newline
3. install rggobi   \newline
a. Download and install ggobi (www.ggobi.org)  \newline
b. Install rggobi: \textit{install.packages(``rggobi'')} \newline \newline
4. Install gWidgets  \newline
a. Install R package, gWidgets: \textit{install.packages(``gWidgets'')} \newline \newline
5. Install gWidgetsRGtk2 \newline
a. Install R package, gWidgetsRGtk2: \textit{install.packages(``gWidgetsRGtk2'')} \newline \newline
6. Install lattice  \newline
a. Install R package, lattice: \textit{install.packages(``lattice'')} \newline \newline
7. Install ggplot2  \newline
a. Install R package, lattice: \textit{install.packages(``ggplot2'')} \newline \newline
\section{PKgraph infrastructure}
The software incorporates a key concept: interactive graphics to link various datasets and diagnostics plots. The framework is programmed using RGtk2 and consists of main formats of interfaces,
(1) main, containing links to all parts of the software, and handles the basic data management, and links to diagnostic modules, and (2) graph, which provides tools specifically for each diagnostic module. (2). Basic module: data input/output module, configuration module, and data management module.
\newline
\newline
\subsection{Graphical user interfaces}
\subsubsection{Main interface}
The main interface (Figure~\ref{c4_s2_1}) of PKgraph provide the links to all components of the software. There are four areas: (1) tool area (tool bar and menu bar, top), (2) directory area (middle-left), (3) data area (middle-right) and (4) status bar (bottom).
\newline
\newline
\begin{itemize}
	\item The tool area has menu items linking to the basic management modules (project, configuration, data management) and the diagnostic modules (exploratory data analysis, PK models, model validation, model comparison and interactive diagnostics). These are menu items containing numerous functions associated with each of the different types of diagnostics.
	\item The directory area shows current directory and all of its files. These files might be data files, or code, depending on the modeling software used.
	\item Clicking on any of the data files, will open them and display them in the data area (3).  Choosing the file also brings up a panel allowing for different formats to be read, thus handling all possible modeling software formats. The data files might contain raw data, and model diagnostics such as parameter estimates, fitted values and residuals and these are displayed in the table view of the data area.
	\item The stats bar displays the progress of the different functions, for example here it says ``Data is loaded successfully'' to indicate that there were no problems with opening the data file.
\end{itemize}
\begin{figure}[h!tb]
\centering
\includegraphics[scale=0.6]{c4_s2_1main.pdf}
\caption{Main interface of PKgraph}
\label{c4_s2_1}
\end{figure}
\subsubsection{Graph interface}
Selecting an item from a diagnostic module menu brings up a graph interface (Figure~\ref{c4_s2_2}). The style of the interface is the same for all diagnostic functionality.  It contains three areas: 1) parameter setup area, 2) tool bar, 3) plot area.
\newline
\newline
\begin{itemize}
	\item The parameter area setup allows choice of variable, plot labels, layout for trellis or facetted plots. A choice of lattice or ggplot2 graphics is provided.
	\item The tool bar allows the plots to be saved, opening the plot in ggobi for interaction on the plot, synchronize subset selection from ggobi to the data in R, and close ggobi.
	\item The plot area displays the figure, and multiple figures if more than one are created.
\end{itemize}
\begin{figure}[h!tb] \centering
\includegraphics[scale=0.6]{c4_s2_2graph.pdf}
\caption{Functional model interface of PKgraph}
\label{c4_s2_2}
\end{figure}
\subsection{Functional module}
Functional module matches the menu items in PKgraph toolbar. It includes the following menu itmes: \newline
\begin{itemize}
	\item Project
	\item Configure
	\item Data management
	\item Exploratory data analysis
	\item PK models
	\item Model validation
	\item Model comparison
	\item Interactive graphics
\end{itemize}
In the next sections, I will go through each menu item in detail.
\section{Functions}
In this section, I will go through each function in the menu item of toolbar.
\subsection{Project}
This menu itme is in charge of input, output and save data. It has the following functions (Figure~\ref{project}),
\begin{itemize}
	\item \textit{Open data}: open modeling fit result from NONMEM, Monolix, SAS, R or other software.
  It has options to setup the data format, start line and separation symbol.
	\item \textit{Save a file}: save a file.
	\item \textit{Save a workspace}: save a workspace for later usage. It generally saves a group of lists
	for configuration and related data.
	\item \textit{Restore old workspace}: restore the workspace from the data and list you saved from previous step.
	\item \textit{Exit}: exit from PKgraph.
\end{itemize}
\begin{figure}[h!tb] \centering
\includegraphics[scale=0.6]{project.pdf}
\caption{Menu items in \textit{Project}}
\label{project}
\end{figure}
\subsection{Configure}
This menu itme is utilized to configure PKgraph. It has the following functions (Figure~\ref{configure}),
\begin{itemize}
	\item \textit{Set working directory}: change current directory.
	\item \textit{Set saving format}: set up saving format for figures, including pdf, jpg, tiff, png
  bmp, win.metafile, and figure width and height. If figure width and height is not setup, a default one
  will be used.
	\item \textit{Save a workspace}: save a workspace for later usage. It generally saves a group of lists
	for configuration and related data.
	\item \textit{Set figure configuration}: color and loess can be setup here for figures.
\end{itemize}
\begin{figure}[h!tb] \centering
\includegraphics[scale=0.6]{configure.pdf}
\caption{Menu items in \textit{Configure}}
\label{configure}
\end{figure}
\subsection{Data management}
This menu item is utilized to manage data. It has the following functions (Figure~\ref{data}),
\begin{itemize}
	\item \textit{Subset}: subset current data.
	\item \textit{Factor}: factor categorical variables. Graphical packages require
	variables to be factor type in order to display related symbol in figures.
\end{itemize}
\begin{figure}[h!tb] \centering
\includegraphics[scale=0.6]{data.pdf}
\caption{Menu items in \textit{Data management}}
\label{data}
\end{figure}

\end{document}
